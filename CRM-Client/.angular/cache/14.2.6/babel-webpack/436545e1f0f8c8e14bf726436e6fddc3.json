{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ErrorHandlerInterceptor = /*#__PURE__*/(() => {\n  class ErrorHandlerInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(response => {\n        if (response) {\n          switch (response.status) {\n            case 400:\n              if (response.error.errors) {\n                // response.error.errors.forEach((error: any) => {\n                //   Swal.fire({\n                //     position: 'top-end',\n                //     icon: 'error',\n                //     title: error,\n                //     showConfirmButton: false,\n                //     timer: 2000\n                //   })\n                // });\n                const modalStateErrors = [];\n\n                for (const error in response.error.errors) {\n                  if (response.error.errors[error]) {\n                    modalStateErrors.push(response.error.errors[error]);\n                  }\n                }\n\n                throw modalStateErrors.flat();\n              } else if (typeof response.error === 'object') {\n                Swal.fire({\n                  position: 'top-end',\n                  icon: 'error',\n                  title: response.error,\n                  showConfirmButton: false,\n                  timer: 2000\n                });\n              } else {\n                Swal.fire({\n                  position: 'top-end',\n                  icon: 'error',\n                  title: response.error,\n                  showConfirmButton: false,\n                  timer: 2000\n                });\n              }\n\n              break;\n\n            case 401:\n              Swal.fire({\n                position: 'top-end',\n                icon: 'error',\n                title: response.error,\n                showConfirmButton: false,\n                timer: 2000\n              });\n              break;\n\n            case 404:\n              this.router.navigateByUrl(\"/not-found\");\n              break;\n\n            case 500:\n              const navigationExtras = {\n                state: {\n                  error: response.error\n                }\n              };\n              this.router.navigateByUrl(\"/server-error\", navigationExtras);\n              break;\n\n            default:\n              Swal.fire({\n                position: 'top-end',\n                icon: 'error',\n                title: 'Something unexpected went wrong',\n                showConfirmButton: false,\n                timer: 2000\n              });\n              console.log(response);\n              break;\n          }\n        }\n\n        return throwError(response);\n      }));\n    }\n\n  }\n\n  ErrorHandlerInterceptor.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n    return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n\n  ErrorHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerInterceptor,\n    factory: ErrorHandlerInterceptor.ɵfac\n  });\n  return ErrorHandlerInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}