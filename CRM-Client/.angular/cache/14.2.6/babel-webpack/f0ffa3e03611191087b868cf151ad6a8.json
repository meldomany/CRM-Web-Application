{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.baseUrl = environment.baseUrl + 'Authentication/';\n      this.currentUser = new ReplaySubject(1);\n      this.currentUser$ = this.currentUser.asObservable();\n    }\n\n    login(loginModel) {\n      return this.http.post(this.baseUrl + 'Login', loginModel).pipe(map(response => {\n        if (response.token != null) {\n          localStorage.setItem('authResult', JSON.stringify(response));\n          this.currentUser.next(response);\n        }\n      }));\n    }\n\n    register(registerModel) {\n      return this.http.post(this.baseUrl + 'Register', registerModel).pipe(map(response => {\n        if (response.token != null) {\n          localStorage.setItem('authResult', JSON.stringify(response));\n          this.currentUser.next(response);\n        }\n      }));\n    }\n\n    setCurrentUser(authResult) {\n      this.currentUser.next(authResult);\n    }\n\n    logout() {\n      localStorage.removeItem(\"authResult\");\n      this.router.navigateByUrl('/login');\n      this.currentUser.next(null);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}