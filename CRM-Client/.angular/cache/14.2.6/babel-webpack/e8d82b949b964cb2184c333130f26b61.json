{"ast":null,"code":"import { FormArray, FormBuilder, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/customers.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nfunction EditCustomerComponent_ng_container_40_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function EditCustomerComponent_ng_container_40_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const addressForm_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      let tmp_b_0;\n      return i0.ɵɵresetView(ctx_r5.removeAddress((tmp_b_0 = addressForm_r1.get(\"id\")) == null ? null : tmp_b_0.value));\n    });\n    i0.ɵɵtext(1, \"Remove\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction EditCustomerComponent_ng_container_40_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function EditCustomerComponent_ng_container_40_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.removeAddressIndex(i_r2));\n    });\n    i0.ɵɵtext(1, \"Remove\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction EditCustomerComponent_ng_container_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 28)(2, \"div\", 4)(3, \"div\", 29)(4, \"div\", 6);\n    i0.ɵɵtemplate(5, EditCustomerComponent_ng_container_40_button_5_Template, 2, 0, \"button\", 30);\n    i0.ɵɵtemplate(6, EditCustomerComponent_ng_container_40_button_6_Template, 2, 0, \"button\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 5)(8, \"input\", 31);\n    i0.ɵɵelementStart(9, \"div\", 32)(10, \"label\", 33);\n    i0.ɵɵtext(11, \"Line1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 32)(14, \"label\", 35);\n    i0.ɵɵtext(15, \"Line2\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 32)(18, \"label\", 37);\n    i0.ɵɵtext(19, \"Postal Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"input\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 32)(22, \"label\", 39);\n    i0.ɵɵtext(23, \"Country\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(24, \"input\", 40);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 32)(26, \"label\", 41);\n    i0.ɵɵtext(27, \"City\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(28, \"input\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"div\", 32)(30, \"label\", 43);\n    i0.ɵɵtext(31, \"State\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(32, \"input\", 44);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"div\", 22);\n    i0.ɵɵelement(34, \"input\", 45);\n    i0.ɵɵelementStart(35, \"label\", 46);\n    i0.ɵɵtext(36, \"Shipping Address\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(37, \"input\", 47);\n    i0.ɵɵelementStart(38, \"label\", 46);\n    i0.ɵɵtext(39, \"Billing Address\");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const addressForm_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = addressForm_r1.get(\"id\")) == null ? null : tmp_1_0.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !((tmp_2_0 = addressForm_r1.get(\"id\")) == null ? null : tmp_2_0.value));\n    i0.ɵɵadvance(28);\n    i0.ɵɵproperty(\"id\", \"shippingAddress\" + i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"shippingAddress\" + i_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", \"billingAddress\" + i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"billingAddress\" + i_r2);\n  }\n}\n\nexport let EditCustomerComponent = /*#__PURE__*/(() => {\n  class EditCustomerComponent {\n    constructor(customersService, router, fb, route) {\n      this.customersService = customersService;\n      this.router = router;\n      this.fb = fb;\n      this.route = route;\n      this.customerCode = '';\n      this.customerForm = this.fb.group({\n        id: [0, Validators.required],\n        code: ['', {\n          Validators: [Validators.required, Validators.minLength(5), Validators.maxLength(15)]\n        }],\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', {\n          Validators: [Validators.required, Validators.email]\n        }],\n        phone: [''],\n        status: [true, Validators.required],\n        addresses: this.fb.array([])\n      });\n    }\n\n    ngOnInit() {\n      this.customerDetails(this.route.snapshot.params['customerCode']);\n    }\n\n    customerDetails(customerCode) {\n      this.customersService.getCustomer(customerCode).subscribe(response => {\n        this.customerSelectionModel = response;\n        this.customerForm.patchValue({\n          id: response.id,\n          code: response.code,\n          firstName: response.firstName,\n          lastName: response.lastName,\n          email: response.email,\n          phone: response.phone,\n          status: response.status\n        });\n        response.addresses.forEach(address => {\n          let addressType = 'shipping';\n\n          if (address.shippingAddress) {\n            addressType = 'shipping';\n          } else {\n            addressType = 'billing';\n          }\n\n          this.addresses.push(this.fb.group({\n            id: [address.id, Validators.required],\n            line1: [address.line1, Validators.required],\n            line2: [address.line2],\n            country: [address.country, Validators.required],\n            city: [address.city, Validators.required],\n            state: [address.state, Validators.required],\n            postalCode: [address.postalCode],\n            addressType: [addressType, Validators.required],\n            shippingAddress: [address.shippingAddress],\n            billingAddress: [address.billingAddress],\n            customerId: [address.customerId, Validators.required]\n          }));\n        });\n      });\n    }\n\n    get addresses() {\n      return this.customerForm.controls[\"addresses\"];\n    }\n\n    addAddress() {\n      const addressForm = this.fb.group({\n        line1: ['', Validators.required],\n        line2: [''],\n        country: ['', Validators.required],\n        city: ['', Validators.required],\n        state: ['', Validators.required],\n        postalCode: [''],\n        addressType: ['', Validators.required],\n        shippingAddress: [''],\n        billingAddress: ['']\n      });\n      this.addresses.push(addressForm);\n    }\n\n    removeAddressIndex(addressIndex) {\n      this.addresses.removeAt(addressIndex);\n    }\n\n    removeAddress(addressId) {\n      Swal.fire({\n        title: 'Are you sure?',\n        text: \"You won't be able to revert this!\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, delete it!'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.customersService.RemoveAddress(addressId).subscribe(() => {\n            this.router.navigateByUrl('/customers');\n            Swal.fire({\n              position: 'top-end',\n              icon: 'success',\n              title: 'Address deleted successfully',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          });\n        }\n      });\n    }\n\n    formSubmition() {\n      this.customerForm.controls[\"addresses\"].controls.forEach(element => {\n        if (element.get('addressType')?.value == 'shipping') {\n          element.get('shippingAddress')?.setValue(true);\n          element.get('billingAddress')?.setValue(false);\n        } else {\n          element.get('billingAddress')?.setValue(true);\n          element.get('shippingAddress')?.setValue(false);\n        }\n      });\n      const customerEditionModel = this.customerForm.value;\n      this.customersService.UpdateCustomer(customerEditionModel).subscribe(() => {\n        this.router.navigateByUrl('/customers');\n        Swal.fire({\n          position: 'top-end',\n          icon: 'success',\n          title: 'Customer updated successfully',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      });\n    }\n\n  }\n\n  EditCustomerComponent.ɵfac = function EditCustomerComponent_Factory(t) {\n    return new (t || EditCustomerComponent)(i0.ɵɵdirectiveInject(i1.CustomersService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  EditCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditCustomerComponent,\n    selectors: [[\"app-edit-customer\"]],\n    decls: 43,\n    vars: 5,\n    consts: [[1, \"my-3\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-md-5\"], [1, \"card\"], [1, \"card-body\"], [\"type\", \"hidden\", \"formControlName\", \"id\"], [1, \"col-md-12\", \"mb-3\"], [\"type\", \"radio\", \"formControlName\", \"status\", \"id\", \"active\", 3, \"value\"], [\"for\", \"active\", 1, \"form-check-label\", \"ms-1\"], [\"type\", \"radio\", \"formControlName\", \"status\", \"id\", \"inactive\", 1, \"ms-5\", 3, \"value\"], [\"for\", \"inactive\", 1, \"form-check-label\", \"ms-1\"], [\"for\", \"code\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"code\", \"formControlName\", \"code\", 1, \"form-control\"], [1, \"col-md-6\", \"mb-3\"], [\"for\", \"firstName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"firstName\", \"formControlName\", \"firstName\", 1, \"form-control\"], [\"for\", \"lastName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"lastName\", \"formControlName\", \"lastName\", 1, \"form-control\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"phone\", 1, \"form-label\"], [\"type\", \"tel\", \"id\", \"phone\", \"formControlName\", \"phone\", 1, \"form-control\"], [1, \"col-md-12\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"disabled\"], [1, \"col-md-7\"], [\"formArrayName\", \"addresses\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"btn-sm\", 3, \"click\"], [1, \"card\", \"mb-3\"], [1, \"row\", 3, \"formGroupName\"], [\"type\", \"button\", \"class\", \"btn btn-danger btn-sm\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"hidden\", \"formControlName\", \"customerId\"], [1, \"col-md-4\", \"mb-3\"], [\"for\", \"line1\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"line1\", \"formControlName\", \"line1\", 1, \"form-control\"], [\"for\", \"line2\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"line2\", \"formControlName\", \"line2\", 1, \"form-control\"], [\"for\", \"postalCode\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"postalCode\", \"formControlName\", \"postalCode\", 1, \"form-control\"], [\"for\", \"country\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"country\", \"formControlName\", \"country\", 1, \"form-control\"], [\"for\", \"city\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"city\", \"formControlName\", \"city\", 1, \"form-control\"], [\"for\", \"state\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"state\", \"formControlName\", \"state\", 1, \"form-control\"], [\"type\", \"radio\", \"formControlName\", \"addressType\", \"value\", \"shipping\", 3, \"id\"], [1, \"form-check-label\", \"ms-1\", 3, \"for\"], [\"type\", \"radio\", \"formControlName\", \"addressType\", \"value\", \"billing\", 1, \"ms-5\", 3, \"id\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"]],\n    template: function EditCustomerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function EditCustomerComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.customerForm.valid && ctx.formSubmition();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 1);\n        i0.ɵɵelement(6, \"input\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelement(8, \"input\", 7);\n        i0.ɵɵelementStart(9, \"label\", 8);\n        i0.ɵɵtext(10, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵelementStart(12, \"label\", 10);\n        i0.ɵɵtext(13, \"InActive\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 11);\n        i0.ɵɵtext(16, \"Code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 13)(19, \"label\", 14);\n        i0.ɵɵtext(20, \"First Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 13)(23, \"label\", 16);\n        i0.ɵɵtext(24, \"Last Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 6)(27, \"label\", 18);\n        i0.ɵɵtext(28, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 6)(31, \"label\", 20);\n        i0.ɵɵtext(32, \"Phone\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(33, \"input\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 22);\n        i0.ɵɵelement(35, \"hr\");\n        i0.ɵɵelementStart(36, \"button\", 23);\n        i0.ɵɵtext(37, \"Update cutomer\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(38, \"div\", 24);\n        i0.ɵɵelementContainerStart(39, 25);\n        i0.ɵɵtemplate(40, EditCustomerComponent_ng_container_40_Template, 40, 7, \"ng-container\", 26);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementStart(41, \"button\", 27);\n        i0.ɵɵlistener(\"click\", function EditCustomerComponent_Template_button_click_41_listener() {\n          return ctx.addAddress();\n        });\n        i0.ɵɵtext(42, \"New address\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"value\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", false);\n        i0.ɵɵadvance(25);\n        i0.ɵɵproperty(\"disabled\", ctx.customerForm.invalid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.addresses.controls);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName]\n  });\n  return EditCustomerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}